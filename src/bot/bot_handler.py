import random
import threading
import time

import requests
from dotenv import load_dotenv
from telebot import types

from consts import RECIPES_URL

from .abstract_base import BaseTelegramBot

load_dotenv()


class RecipeBot(BaseTelegramBot):
    def __init__(self):
        super().__init__()

        self.recipes_url = RECIPES_URL
        self.recipes = self._fetch_all_recipes()
        self.previous_recipe_id = None
        self._setup_handlers()
        self._start_periodic_refresh()

    def _fetch_all_recipes(self):
        return requests.get(self.recipes_url).json()

    def _setup_handlers(self):
        self.bot.message_handler(commands=['start'])(self.greet_user)
        self.bot.message_handler(
            func=lambda msg: msg.text == '–†–µ—Ü–µ–ø—Ç'
        )(self.send_recipe)
        self.bot.message_handler(
            func=lambda msg: msg.text == '–ó–∞–≤—Ç—Ä–∞–∫'
        )(self.send_breakfast)
        self.bot.message_handler(
            func=lambda msg: msg.text == '–î–µ—Å–µ—Ä—Ç'
        )(self.send_dessert)

    @staticmethod
    def create_buttons():
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º"""
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        get_random_recipe = types.KeyboardButton('–†–µ—Ü–µ–ø—Ç')
        get_breakfast = types.KeyboardButton('–ó–∞–≤—Ç—Ä–∞–∫')
        get_dessert = types.KeyboardButton('–î–µ—Å–µ—Ä—Ç')
        keyboard.add(get_random_recipe, get_breakfast, get_dessert)
        return keyboard

    def greet_user(self, message):
        """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        keyboard = self.create_buttons()
        chat = message.chat
        self.bot.send_message(
            chat_id=chat.id,
            text='–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç —Å –∏–¥–µ—è–º–∏ –ø—Ä–æ—Å—Ç—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤',
            reply_markup=keyboard,
        )

    def get_random_recipe_data(self):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—è –ø—Ä–µ–¥—ã–¥—É—â–∏–π
        """
        recipes = self.recipes
        total_recipes = len(recipes)

        if total_recipes == 0:
            return None
        if total_recipes == 1:
            self.previous_recipe_id = recipes[0]['id']
            return recipes[0]

        filtered = [r for r in recipes if r['id'] != self.previous_recipe_id]
        if not filtered:
            recipe = recipes[0]
        else:
            recipe = random.choice(filtered)
        self.previous_recipe_id = recipe['id']
        return recipe

    def get_recipe_by_tag(self, tag):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞ –ø–æ —Ç–µ–≥—É, –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—è –ø—Ä–µ–¥—ã–¥—É—â–∏–π
        """
        response = requests.get(f'{self.recipes_url}?tags={tag}').json()
        total_recipes = len(response)

        if total_recipes == 0:
            return None
        if total_recipes == 1:
            self.previous_recipe_id = response[0]['id']
            return response[0]

        filtered = [r for r in response if r['id'] != self.previous_recipe_id]
        if not filtered:
            recipe = response[0]
        else:
            recipe = random.choice(filtered)
        self.previous_recipe_id = recipe['id']
        return recipe

    @staticmethod
    def format_ingredients(ingredients):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
        return '\n'.join(
            [
                f'- {ingredient["name"]}: {ingredient["amount"]} '
                f'{ingredient["measurement_unit"]}'
                for ingredient in ingredients
            ]
        )

    @staticmethod
    def format_recipe_details(recipe):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–µ—Ü–µ–ø—Ç–µ"""
        cooking_time = recipe['cooking_time']
        description = recipe['description']
        ingredients = RecipeBot.format_ingredients(
            recipe['ingredients_display']
        )

        return (
            f'‚è≥ *–í—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏:* {cooking_time} –º–∏–Ω—É—Ç\n'
            f'üç™ *–û–ø–∏—Å–∞–Ω–∏–µ:* {description}\n\n'
            f'üõí *–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:* \n{ingredients}'
        )

    def send_recipe(self, message):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        chat = message.chat
        random_recipe = self.get_random_recipe_data()
        title = random_recipe['title']

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ä–µ—Ü–µ–ø—Ç–∞
        self.bot.send_photo(
            chat_id=chat.id,
            photo=random_recipe['image'],
            caption=f'üçΩÔ∏è *–†–µ—Ü–µ–ø—Ç –¥–Ω—è:* {title}',
            parse_mode='Markdown',
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏ –∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        self.bot.send_message(
            chat_id=chat.id,
            text=self.format_recipe_details(random_recipe),
            parse_mode='Markdown',
        )

    def send_breakfast(self, message):
        chat = message.chat
        breakfast_recipe = self.get_recipe_by_tag('–ó–∞–≤—Ç—Ä–∞–∫')
        title = breakfast_recipe['title']

        self.bot.send_photo(
            chat_id=chat.id,
            photo=breakfast_recipe['image'],
            caption=f'üçΩÔ∏è *–†–µ—Ü–µ–ø—Ç –ó–∞–≤—Ç—Ä–∞–∫–∞:* {title}',
            parse_mode='Markdown',
        )
        self.bot.send_message(
            chat_id=chat.id,
            text=self.format_recipe_details(breakfast_recipe),
            parse_mode='Markdown',
        )

    def send_dessert(self, message):
        chat = message.chat
        dessert_recipe = self.get_recipe_by_tag('–î–µ—Å–µ—Ä—Ç')
        title = dessert_recipe['title']

        self.bot.send_photo(
            chat_id=chat.id,
            photo=dessert_recipe['image'],
            caption=f'üçΩÔ∏è *–†–µ—Ü–µ–ø—Ç –î–µ—Å–µ—Ä—Ç–∞:* {title}',
            parse_mode='Markdown',
        )
        self.bot.send_message(
            chat_id=chat.id,
            text=self.format_recipe_details(dessert_recipe),
            parse_mode='Markdown',
        )

    def _start_periodic_refresh(self, interval=300):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 300 —Å–µ–∫—É–Ω–¥"""

        def refresh_loop():
            while True:
                time.sleep(interval)
                try:
                    self.recipes = self._fetch_all_recipes()
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–æ–≤: {e}')

        thread = threading.Thread(target=refresh_loop, daemon=True)
        thread.start()

    def run(self):
        print('\x1b[6;30;42m' + '–ë–æ—Ç –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É!' + '\x1b[0m')
        self.bot.polling()
        print('\x1b[6;30;41m' + '–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!' + '\x1b[0m')

